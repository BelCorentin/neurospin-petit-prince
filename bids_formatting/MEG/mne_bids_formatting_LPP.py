"""
This program is meant to preprocess the raw data generated by the MEG, 
that does not follow the same rules:
ex: some files are named sub_blocX_raw.fif where some others are sub_rX_raw.fif

The point will be to format everything under a stable and normalized format:
BIDS which will simplify postprocessing.

Another point is that we'll need to add the text annotation / word events in 
the different subject foldes for other analysis.


"""

# Imports
from __future__ import annotations
import sys
import os
import mne
from mne_bids import BIDSPath, write_raw_bids  
import re
import numpy as np

# CONST
BIDS_PATH = '/home/is153802/workspace_LPP/data/MEG/LPP/alternative_bids'
RAW_DATA_PATH = '/home/is153802/workspace_LPP/data/MEG/LPP/raw'

""" 

Each folder / fif file name format is different, so depending on its format, we need
different processes to extract the run, subject, etc..

Different types: 
SA_bloc82_raw.fif
sf_r1_raw.fif
rt220104_partie9.fif
bloc2_raw.fif

The objective is to get all the unnormalized file names to follow the same pattern:
in this case, we'll choose the most common: the sub_r{run_number}_raw.fif format

Once it's done, it is possible to iterate on the file names to create the corresponding
BIDS Datasets
"""


# Get the list of raw folders
raw_list = os.listdir(RAW_DATA_PATH)

# For each of these folders, go into the sub folder (that has the name of a subject)
for folder in raw_list:
    sub_dir = os.path.join(RAW_DATA_PATH,folder)
    sub_list = os.listdir(sub_dir)
    for sub in sub_list:



        # Get the list of runs
        run_dir = os.path.join(sub_dir,sub)
        run_list = os.listdir(run_dir)
        run_total = len(run_list)
        for file in run_list:
            # Use a regular expression to get the run number in the file name
            try:
                run = re.search(r"_r([^']*)_raw", file).group(1)
            # Two cases: filenames is sub_r{run_number}_raw or sub_run{run_number}_raw
            # so it's we are in the second case, ignore the first re and keep the 2nd result
                if len(run) > 2:
                    run = re.search(r"_run([^']*)_raw", file).group(1)
            except:
                continue

                    # Check if the BIDS dataset already exists:
            if(os.path.exists(os.path.join(BIDS_PATH,f"sub-{sub}/ses-0/meg/\
            sub-{sub}_ses-0_task-0_run-{run}_meg.fif"))):
                continue
            # Open the raw file
            raw = mne.io.read_raw_fif(os.path.join(run_dir,file),allow_maxshield=True)

            # Create a BIDS path with the correct parameters 
            bids_path = BIDSPath(subject=sub, session='0', run='0'+str(run),datatype='meg', root=BIDS_PATH)
            bids_path.task = "0"

            # Write the BIDS path from the raw file
            write_raw_bids(raw, bids_path=bids_path,overwrite = True)




# print(sub_list)
 
# # For each patient
# for sub in sub_list:
#     # Get the list of runs
#     sub_dir = os.path.join(MEG_data_dir,sub)
#     bloc_list = os.listdir(sub_dir)
#     run_total = len(bloc_list)
#     for file in bloc_list:
#         # Use a regular expression to get the run number in the file name
#         run = re.search(r"_r([^']*)_raw", file).group(1)
#         # Open the raw file
#         raw = mne.io.read_raw_fif(os.path.join(sub_dir,file),allow_maxshield=True)

#         # Create a BIDS path with the correct parameters 
#         bids_path = BIDSPath(subject=sub, session='01', run=run,datatype='meg', root=BIDS_PATH)
#         bids_path.task = "0"

#         # Write the BIDS path from the raw file
#         write_raw_bids(raw, bids_path=bids_path,overwrite = True)

